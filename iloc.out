	// Assign STATIC_AREA_ADDRESS to register "r0"
 	 loadI 1024 	=> r0 
 	 loadI 0 	=> r1 
	// Compute address of array variable "d" with base address 88
 	 loadI 4 	=> r3 
 	 mult r1, r3 	=> r4 
 	 loadI 88 	=> r5 
 	 add r5, r4 	=> r6 
 	 add r0, r6 	=> r2 
 	 loadI 1 	=> r7 
 	 store r7 	=> r2 
 	 loadI 2 	=> r8 
	// Compute address of array variable "d" with base address 88
 	 loadI 4 	=> r10 
 	 mult r8, r10 	=> r11 
 	 loadI 88 	=> r12 
 	 add r12, r11 	=> r13 
 	 add r0, r13 	=> r9 
 	 loadI 0 	=> r14 
 	 store r14 	=> r9 
	// Compute address of variable "status" at offset 136 in register 16
 	 loadI 136 	=> r15 
 	 add r0, r15 	=> r16 
 	 loadI 0 	=> r17 
	// Load RHS value of array variable "d" with based address 88
 	 loadI 4 	=> r19 
 	 mult r17, r19 	=> r20 
 	 loadI 88 	=> r21 
 	 add r21, r20 	=> r22 
 	 loadAO r0, r22 	=> r18 
 	 loadI 1 	=> r23 
	// Load RHS value of array variable "d" with based address 88
 	 loadI 4 	=> r25 
 	 mult r23, r25 	=> r26 
 	 loadI 88 	=> r27 
 	 add r27, r26 	=> r28 
 	 loadAO r0, r28 	=> r24 
 	 or r18, r24 	=> r29 
 	 store r29 	=> r16 
 	 loadI 1 	=> r30 
	// Compute address of array variable "d" with base address 88
 	 loadI 4 	=> r32 
 	 mult r30, r32 	=> r33 
 	 loadI 88 	=> r34 
 	 add r34, r33 	=> r35 
 	 add r0, r35 	=> r31 
	// Load RHS value of variable "status" at offset 136
 	 loadAI r0, 136 	=> r36 
 	 store r36 	=> r31 
	// Compute address of variable "i" at offset 0 in register 38
 	 loadI 0 	=> r37 
 	 add r0, r37 	=> r38 
 	 loadI 1 	=> r39 
 	 store r39 	=> r38 
L0:	 nop 
	// Control code for "WHILE DO"
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r40 
 	 loadI 11 	=> r41 
 	 cmp_LE r40, r41 	=> r42
 	 cbr r42 	=> L1, L2
L1:	 nop 
	// Body of "WHILE" construct starts here
	// Compute address of variable "j" at offset 4 in register 44
 	 loadI 4 	=> r43 
 	 add r0, r43 	=> r44 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r45 
 	 loadI 1 	=> r46 
 	 sub r45, r46 	=> r47 
 	 store r47 	=> r44 
	// Compute address of variable "status" at offset 136 in register 49
 	 loadI 136 	=> r48 
 	 add r0, r48 	=> r49 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r50 
	// Load RHS value of array variable "d" with based address 88
 	 loadI 4 	=> r52 
 	 mult r50, r52 	=> r53 
 	 loadI 88 	=> r54 
 	 add r54, r53 	=> r55 
 	 loadAO r0, r55 	=> r51 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r56 
	// Load RHS value of array variable "d" with based address 88
 	 loadI 4 	=> r58 
 	 mult r56, r58 	=> r59 
 	 loadI 88 	=> r60 
 	 add r60, r59 	=> r61 
 	 loadAO r0, r61 	=> r57 
 	 or r51, r57 	=> r62 
 	 store r62 	=> r49 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r63 
	// Compute address of array variable "d" with base address 88
 	 loadI 4 	=> r65 
 	 mult r63, r65 	=> r66 
 	 loadI 88 	=> r67 
 	 add r67, r66 	=> r68 
 	 add r0, r68 	=> r64 
	// Load RHS value of variable "status" at offset 136
 	 loadAI r0, 136 	=> r69 
 	 store r69 	=> r64 
	// Load RHS value of variable "status" at offset 136
 	 loadAI r0, 136 	=> r70 
	// Code for "PRINT" from offset -4
 	 storeAI r70 	=> r0, -4 
 	 outputAI r0, -4
	// Compute address of variable "i" at offset 0 in register 72
 	 loadI 0 	=> r71 
 	 add r0, r71 	=> r72 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r73 
 	 loadI 1 	=> r74 
 	 add r73, r74 	=> r75 
 	 store r75 	=> r72 
 	 br L0
L2:	 nop 
