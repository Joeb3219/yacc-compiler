	// Assign STATIC_AREA_ADDRESS to register "r0"
 	 loadI 1024 	=> r0 
	// Computing address for variable n into register "r2"
 	 loadI 0 	=> r1 
 	 add r0, r1 	=> r2 
 	 loadI 6 	=> r3 
 	 store r3 	=> r2 
	// Computing address for variable p1 into register "r5"
 	 loadI 4 	=> r4 
 	 add r0, r4 	=> r5 
 	 loadI 1 	=> r6 
 	 store r6 	=> r5 
	// Computing address for variable p2 into register "r8"
 	 loadI 8 	=> r7 
 	 add r0, r7 	=> r8 
 	 loadI 1 	=> r9 
 	 store r9 	=> r8 
	// WHILE STATEMENT #0
L0:	 nop 
	// Loading variable n from RHS to register "r10"
 	 loadAI r0, 0 	=> r10 
 	 loadI 2 	=> r11 
	// Asserting "r10" > "r11"
 	 cmp_GT r10, r11 	=> r12
	// Testing conditional into register r12
 	 cbr r12 	=> L1, L2
L1:	 nop 
	// Computing address for variable h into register "r14"
 	 loadI 12 	=> r13 
 	 add r0, r13 	=> r14 
	// Loading variable p2 from RHS to register "r15"
 	 loadAI r0, 8 	=> r15 
 	 store r15 	=> r14 
	// Computing address for variable p2 into register "r17"
 	 loadI 8 	=> r16 
 	 add r0, r16 	=> r17 
	// Loading variable p2 from RHS to register "r18"
 	 loadAI r0, 8 	=> r18 
	// Loading variable p1 from RHS to register "r19"
 	 loadAI r0, 4 	=> r19 
	// ADD'ing variables stored in registers 18 and 19
 	 add r18, r19 	=> r20 
 	 store r20 	=> r17 
	// Computing address for variable p1 into register "r22"
 	 loadI 4 	=> r21 
 	 add r0, r21 	=> r22 
	// Loading variable h from RHS to register "r23"
 	 loadAI r0, 12 	=> r23 
 	 store r23 	=> r22 
	// Computing address for variable n into register "r25"
 	 loadI 0 	=> r24 
 	 add r0, r24 	=> r25 
	// Loading variable n from RHS to register "r26"
 	 loadAI r0, 0 	=> r26 
 	 loadI 1 	=> r27 
	// SUB'ing variables stored in registers 26 and 27
 	 sub r26, r27 	=> r28 
 	 store r28 	=> r25 
	// Jumping back to the beginng of while loop #0
 	 br L0
	// END WHILE STATEMENT #0
L2:	 nop 
	// Loading variable p2 from RHS to register "r29"
 	 loadAI r0, 8 	=> r29 
	// Code for "PRINT" from offset -4
 	 storeAI r29 	=> r0, -4 
 	 outputAI r0, -4
